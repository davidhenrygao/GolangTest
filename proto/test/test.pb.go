// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "github.com/davidhenrygao/GolangTest/proto/common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CMD int32

const (
	CMD_LOGIN CMD = 1
)

var CMD_name = map[int32]string{
	1: "LOGIN",
}
var CMD_value = map[string]int32{
	"LOGIN": 1,
}

func (x CMD) Enum() *CMD {
	p := new(CMD)
	*p = x
	return p
}
func (x CMD) String() string {
	return proto.EnumName(CMD_name, int32(x))
}
func (x *CMD) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMD_value, data, "CMD")
	if err != nil {
		return err
	}
	*x = CMD(value)
	return nil
}
func (CMD) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type RetCode int32

const (
	RetCode_SUCCESS        RetCode = 0
	RetCode_PROTOCOL_ERROR RetCode = 1
	RetCode_WRONG_PASSWORD RetCode = 2
)

var RetCode_name = map[int32]string{
	0: "SUCCESS",
	1: "PROTOCOL_ERROR",
	2: "WRONG_PASSWORD",
}
var RetCode_value = map[string]int32{
	"SUCCESS":        0,
	"PROTOCOL_ERROR": 1,
	"WRONG_PASSWORD": 2,
}

func (x RetCode) Enum() *RetCode {
	p := new(RetCode)
	*p = x
	return p
}
func (x RetCode) String() string {
	return proto.EnumName(RetCode_name, int32(x))
}
func (x *RetCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RetCode_value, data, "RetCode")
	if err != nil {
		return err
	}
	*x = RetCode(value)
	return nil
}
func (RetCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type Req struct {
	Account          *string             `protobuf:"bytes,1,req,name=account" json:"account,omitempty"`
	Password         *string             `protobuf:"bytes,2,req,name=password" json:"password,omitempty"`
	Token            *string             `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
	GameserverId     *int32              `protobuf:"varint,4,opt,name=gameserver_id" json:"gameserver_id,omitempty"`
	Msg              *string             `protobuf:"bytes,5,opt,name=msg" json:"msg,omitempty"`
	Infos            []*proto1.Extrainfo `protobuf:"bytes,6,rep,name=infos" json:"infos,omitempty"`
	Card             *Card               `protobuf:"bytes,7,opt,name=card" json:"card,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Req) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *Req) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *Req) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *Req) GetGameserverId() int32 {
	if m != nil && m.GameserverId != nil {
		return *m.GameserverId
	}
	return 0
}

func (m *Req) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

func (m *Req) GetInfos() []*proto1.Extrainfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *Req) GetCard() *Card {
	if m != nil {
		return m.Card
	}
	return nil
}

type RespBody struct {
	Secrect          *string `protobuf:"bytes,1,opt,name=secrect" json:"secrect,omitempty"`
	MsgBack          *string `protobuf:"bytes,2,opt,name=msg_back" json:"msg_back,omitempty"`
	Options          []int32 `protobuf:"varint,3,rep,name=options" json:"options,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RespBody) Reset()                    { *m = RespBody{} }
func (m *RespBody) String() string            { return proto.CompactTextString(m) }
func (*RespBody) ProtoMessage()               {}
func (*RespBody) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *RespBody) GetSecrect() string {
	if m != nil && m.Secrect != nil {
		return *m.Secrect
	}
	return ""
}

func (m *RespBody) GetMsgBack() string {
	if m != nil && m.MsgBack != nil {
		return *m.MsgBack
	}
	return ""
}

func (m *RespBody) GetOptions() []int32 {
	if m != nil {
		return m.Options
	}
	return nil
}

type Resp struct {
	Rc               *int32              `protobuf:"varint,1,req,name=rc" json:"rc,omitempty"`
	RespBody         *RespBody           `protobuf:"bytes,2,opt,name=resp_body" json:"resp_body,omitempty"`
	Infos            []*proto1.Extrainfo `protobuf:"bytes,3,rep,name=infos" json:"infos,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *Resp) Reset()                    { *m = Resp{} }
func (m *Resp) String() string            { return proto.CompactTextString(m) }
func (*Resp) ProtoMessage()               {}
func (*Resp) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Resp) GetRc() int32 {
	if m != nil && m.Rc != nil {
		return *m.Rc
	}
	return 0
}

func (m *Resp) GetRespBody() *RespBody {
	if m != nil {
		return m.RespBody
	}
	return nil
}

func (m *Resp) GetInfos() []*proto1.Extrainfo {
	if m != nil {
		return m.Infos
	}
	return nil
}

func init() {
	proto.RegisterType((*Req)(nil), "proto.Req")
	proto.RegisterType((*RespBody)(nil), "proto.RespBody")
	proto.RegisterType((*Resp)(nil), "proto.Resp")
	proto.RegisterEnum("proto.CMD", CMD_name, CMD_value)
	proto.RegisterEnum("proto.RetCode", RetCode_name, RetCode_value)
}

func init() { proto.RegisterFile("test.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x6a, 0xdb, 0x30,
	0x18, 0x80, 0x27, 0x2b, 0x9a, 0x9b, 0xdf, 0x74, 0x31, 0x82, 0x81, 0xd6, 0xcb, 0x4c, 0x4e, 0xa6,
	0x87, 0x64, 0xe4, 0x01, 0x0a, 0xab, 0x1b, 0xc2, 0xa0, 0xab, 0x8b, 0xdc, 0x11, 0xd8, 0xc5, 0x28,
	0x92, 0xe6, 0x9a, 0xce, 0x96, 0x27, 0xa9, 0xdd, 0xf2, 0x24, 0x7b, 0xdd, 0x21, 0xbb, 0xeb, 0xa9,
	0x27, 0x89, 0x4f, 0xfa, 0xf9, 0x3e, 0x21, 0x00, 0xaf, 0x9d, 0x5f, 0x0d, 0xd6, 0x78, 0x43, 0xc9,
	0xb8, 0x9c, 0x2d, 0xf4, 0x1f, 0x6f, 0x45, 0xdb, 0xff, 0x30, 0x13, 0x3f, 0x03, 0x29, 0xac, 0x9a,
	0xf6, 0xcb, 0xbf, 0x08, 0x30, 0xd7, 0xbf, 0xe8, 0x02, 0x62, 0x21, 0xa5, 0x79, 0xec, 0x3d, 0x43,
	0x59, 0x94, 0xcf, 0x69, 0x0a, 0x27, 0x83, 0x70, 0xee, 0xb7, 0xb1, 0x8a, 0x45, 0x23, 0x39, 0x05,
	0xe2, 0xcd, 0x83, 0xee, 0x19, 0xce, 0x50, 0x3e, 0xa7, 0xef, 0xe1, 0xb4, 0x11, 0x9d, 0x76, 0xda,
	0x3e, 0x69, 0x5b, 0xb7, 0x8a, 0xcd, 0x32, 0x94, 0x13, 0x9a, 0x00, 0xee, 0x5c, 0xc3, 0xc8, 0x78,
	0xe7, 0x23, 0x90, 0xe0, 0x75, 0xec, 0x6d, 0x86, 0xf3, 0x64, 0x93, 0x4e, 0xd2, 0xd5, 0xf6, 0x7f,
	0x10, 0xfd, 0x00, 0xb3, 0x10, 0xc3, 0xe2, 0x0c, 0xe5, 0xc9, 0x26, 0x79, 0x3e, 0x0f, 0x68, 0x79,
	0x01, 0x27, 0x5c, 0xbb, 0xe1, 0xd2, 0xa8, 0x63, 0xa8, 0x73, 0x5a, 0x5a, 0x2d, 0x43, 0x1d, 0x9a,
	0xea, 0x3a, 0xd7, 0xd4, 0x07, 0x21, 0x1f, 0x58, 0x34, 0x92, 0x05, 0xc4, 0x66, 0xf0, 0xad, 0xe9,
	0x1d, 0xc3, 0x19, 0xce, 0xc9, 0x72, 0x0f, 0xb3, 0x30, 0x4f, 0x01, 0x22, 0x2b, 0xc7, 0x47, 0x11,
	0xba, 0x84, 0xb9, 0xd5, 0x6e, 0xa8, 0x0f, 0x46, 0x1d, 0xc7, 0xb9, 0x64, 0xb3, 0x78, 0x76, 0xbe,
	0xb8, 0x5e, 0x9a, 0xf1, 0xeb, 0xcd, 0xe7, 0x29, 0xe0, 0xe2, 0xeb, 0x15, 0x9d, 0x03, 0xb9, 0x2e,
	0x77, 0x5f, 0x6e, 0x52, 0x74, 0x7e, 0x01, 0x31, 0xd7, 0xbe, 0x30, 0x4a, 0xd3, 0x04, 0xe2, 0xea,
	0x5b, 0x51, 0x6c, 0xab, 0x2a, 0x7d, 0x43, 0x29, 0xbc, 0xbb, 0xe5, 0xe5, 0x5d, 0x59, 0x94, 0xd7,
	0xf5, 0x96, 0xf3, 0x92, 0xa7, 0x28, 0xb0, 0x3d, 0x2f, 0x6f, 0x76, 0xf5, 0xed, 0xe7, 0xaa, 0xda,
	0x97, 0xfc, 0x2a, 0x8d, 0x2e, 0x3f, 0x7d, 0x5f, 0x35, 0xad, 0xbf, 0x7f, 0x3c, 0xac, 0xa4, 0xe9,
	0xd6, 0x4a, 0x3c, 0xb5, 0xea, 0x5e, 0xf7, 0xf6, 0xd8, 0x08, 0xb3, 0xde, 0x99, 0x9f, 0xa2, 0x6f,
	0xee, 0xb4, 0xf3, 0xeb, 0x31, 0x64, 0x1d, 0x3e, 0xf8, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xca,
	0xfd, 0xb7, 0x81, 0xe7, 0x01, 0x00, 0x00,
}
